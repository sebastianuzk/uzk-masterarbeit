name: Deploy Chatbot

on:
  push:
    branches:
      - main
      - 'feat/**'  # Alle Feature-Branches
  pull_request:
    branches:
      - main
  delete:
    branches:
      - 'feat/**'  # Cleanup bei Branch-L√∂schung

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/chatbot

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v || true
          python test_scraper_components.py || true
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy-main:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://chatbot-prod.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up deployment environment
        run: |
          echo "BRANCH_NAME=main" >> $GITHUB_ENV
          echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
      
      - name: Deploy to production
        run: |
          echo "Deploying main branch to production"
          echo "Environment: production"
          echo "URL: https://chatbot-prod.yourdomain.com"
          # Hier w√ºrde Ihr Production-Deployment-Script kommen
  
  deploy-feature:
    name: Deploy Feature Branch
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/feat/') && github.event_name == 'push'
    environment:
      name: feature-${{ github.ref_name }}
      url: https://chatbot-${{ github.ref_name }}.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract branch info
        id: branch_info
        run: |
          # Extrahiere Branch-Name und sanitize f√ºr URLs/Container-Namen
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          PORT=$((8500 + $(echo "$SANITIZED_BRANCH" | md5sum | cut -c1-4 | xargs printf "%d" 0x) % 100))
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "port=$PORT" >> $GITHUB_OUTPUT
          
          echo "Branch: $BRANCH_NAME"
          echo "Sanitized: $SANITIZED_BRANCH"
          echo "Port: $PORT"
      
      - name: Deploy feature branch
        env:
          BRANCH_NAME: ${{ steps.branch_info.outputs.branch_name }}
          SANITIZED_BRANCH: ${{ steps.branch_info.outputs.sanitized_branch }}
          PORT: ${{ steps.branch_info.outputs.port }}
        run: |
          echo "Deploying feature branch: $BRANCH_NAME"
          echo "Container name: wiso-chatbot-$SANITIZED_BRANCH"
          echo "Port: $PORT"
          echo "URL: https://chatbot-$SANITIZED_BRANCH.yourdomain.com"
          # Hier w√ºrde Ihr Feature-Branch-Deployment-Script kommen
      
      - name: Comment on PR (if exists)
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.branch_info.outputs.branch_name }}';
            const sanitized = '${{ steps.branch_info.outputs.sanitized_branch }}';
            const port = '${{ steps.branch_info.outputs.port }}';
            
            // Finde zugeh√∂rige PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              const deploymentUrl = `https://chatbot-${sanitized}.yourdomain.com`;
              const body = `üöÄ **Deployment erfolgreich!**\n\n` +
                          `Branch: \`${branch}\`\n` +
                          `Environment: \`feature-${sanitized}\`\n` +
                          `Port: \`${port}\`\n` +
                          `URL: ${deploymentUrl}\n\n` +
                          `Der Chatbot ist nun verf√ºgbar f√ºr Tests! üéâ`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prs[0].number,
                body: body
              });
            }
  
  cleanup-feature:
    name: Cleanup Feature Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && startsWith(github.event.ref, 'feat/')
    
    steps:
      - name: Extract branch info
        id: branch_info
        run: |
          BRANCH_NAME="${{ github.event.ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Cleaning up: $SANITIZED_BRANCH"
      
      - name: Cleanup deployment
        env:
          SANITIZED_BRANCH: ${{ steps.branch_info.outputs.sanitized_branch }}
        run: |
          echo "Cleaning up feature branch deployment"
          echo "Container: wiso-chatbot-$SANITIZED_BRANCH"
          # Hier w√ºrde Ihr Cleanup-Script kommen
          # z.B.: docker-compose -f docker-compose.$SANITIZED_BRANCH.yml down -v
