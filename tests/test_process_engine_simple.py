"""
Einfache Tests f√ºr Process Engine ohne komplexe Imports
Testet die Kernfunktionalit√§ten isoliert
"""

import pytest
import os
import sys
from unittest.mock import Mock, patch
from datetime import datetime
from typing import Dict, Any, List

# F√ºge src zum Python Path hinzu
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))


def test_data_extractor_patterns():
    """Test der Regex-Pattern f√ºr Datenextraktion"""
    try:
        from process_engine.data_extractor import ConversationDataExtractor
        
        extractor = ConversationDataExtractor()
        
        # Test Student ID Pattern
        test_message = "Meine Matrikelnummer ist 1234567"
        result = extractor.extract_from_message(test_message)
        
        student_data = [d for d in result if d.entity_type == 'student_id']
        assert len(student_data) > 0
        assert '1234567' in str(student_data[0].data)
        
        print("‚úÖ Data Extractor Test erfolgreich")
        
    except ImportError as e:
        pytest.skip(f"Data Extractor nicht verf√ºgbar: {e}")


def test_bpmn_generator_basic():
    """Test der BPMN-Generierung ohne Deployment"""
    try:
        from process_engine.bpmn_generator import BPMNGenerator
        
        generator = BPMNGenerator()
        
        # Test einfache BPMN Generierung
        bpmn_xml = generator.generate_student_transcript_workflow()
        
        assert bpmn_xml is not None
        assert 'student-transcript-request' in bpmn_xml
        assert 'bpmn:process' in bpmn_xml
        
        print("‚úÖ BPMN Generator Test erfolgreich")
        
    except ImportError as e:
        pytest.skip(f"BPMN Generator nicht verf√ºgbar: {e}")


def test_workflow_definitions():
    """Test der Workflow-Definitionen"""
    try:
        from process_engine.workflow_manager import WorkflowManager
        
        # Mock Process Client
        mock_client = Mock()
        manager = WorkflowManager(mock_client)
        
        # Pr√ºfe Standard-Workflows
        assert 'student_transcript_request' in manager.workflows
        assert 'exam_registration' in manager.workflows
        assert 'grade_inquiry' in manager.workflows
        
        # Pr√ºfe Workflow-Eigenschaften
        transcript_workflow = manager.workflows['student_transcript_request']
        assert transcript_workflow.auto_start is True
        assert 'student_id' in transcript_workflow.required_data
        assert 'email' in transcript_workflow.required_data
        
        print("‚úÖ Workflow Manager Test erfolgreich")
        
    except ImportError as e:
        pytest.skip(f"Workflow Manager nicht verf√ºgbar: {e}")


def test_process_engine_tool_basic():
    """Test des Process Engine Tools ohne echte Verbindung"""
    try:
        from tools.process_engine_tool import ProcessEngineTool
        
        # Mock Settings
        with patch('tools.process_engine_tool.Settings') as mock_settings:
            mock_settings.return_value.ENABLE_PROCESS_ENGINE = False
            
            tool = ProcessEngineTool()
            
            # Test Tool-Eigenschaften
            assert tool.name == "process_engine"
            assert "automatisiert" in tool.description.lower()
            
            # Test deaktivierte Engine
            result = tool._run(action="analyze")
            assert "deaktiviert" in result
            
            print("‚úÖ Process Engine Tool Test erfolgreich")
            
    except ImportError as e:
        pytest.skip(f"Process Engine Tool nicht verf√ºgbar: {e}")


def test_settings_integration():
    """Test der Settings Integration"""
    try:
        # Teste Settings ohne echte .env Datei
        import tempfile
        import shutil
        
        # Erstelle tempor√§res Verzeichnis
        temp_dir = tempfile.mkdtemp()
        original_cwd = os.getcwd()
        
        try:
            os.chdir(temp_dir)
            
            # Erstelle Mock .env Datei
            with open('.env', 'w') as f:
                f.write("""
ENABLE_PROCESS_ENGINE=true
CAMUNDA_ZEEBE_ADDRESS=localhost:26500
CAMUNDA_OPERATE_URL=http://localhost:8081
""")
            
            # Test Settings laden
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
            
            from config.settings import Settings
            settings = Settings()
            
            # Pr√ºfe Process Engine Einstellungen
            assert hasattr(settings, 'ENABLE_PROCESS_ENGINE')
            assert hasattr(settings, 'CAMUNDA_ZEEBE_ADDRESS')
            assert hasattr(settings, 'CAMUNDA_OPERATE_URL')
            
            print("‚úÖ Settings Integration Test erfolgreich")
            
        finally:
            os.chdir(original_cwd)
            shutil.rmtree(temp_dir, ignore_errors=True)
            
    except Exception as e:
        pytest.skip(f"Settings Test nicht verf√ºgbar: {e}")


def test_docker_compose_file_exists():
    """Test ob Docker Compose Datei existiert"""
    # Gehe zum Root-Verzeichnis
    test_dir = os.path.dirname(__file__)
    root_dir = os.path.dirname(test_dir)
    docker_compose_path = os.path.join(root_dir, 'docker-compose.yml')
    
    assert os.path.exists(docker_compose_path), "docker-compose.yml nicht gefunden"
    
    # Pr√ºfe Inhalt
    with open(docker_compose_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    assert 'zeebe' in content
    assert 'operate' in content
    assert 'tasklist' in content
    assert 'elasticsearch' in content
    
    print("‚úÖ Docker Compose Test erfolgreich")


def test_setup_script_exists():
    """Test ob Setup Script existiert"""
    test_dir = os.path.dirname(__file__)
    root_dir = os.path.dirname(test_dir)
    setup_script_path = os.path.join(root_dir, 'setup_process_engine.py')
    
    assert os.path.exists(setup_script_path), "setup_process_engine.py nicht gefunden"
    
    # Pr√ºfe dass es Python-Code ist
    with open(setup_script_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    assert 'ProcessEngineSetup' in content
    assert 'def main()' in content
    
    print("‚úÖ Setup Script Test erfolgreich")


def test_process_engine_imports():
    """Test ob alle Process Engine Module importierbar sind"""
    import_tests = [
        ('process_engine.data_extractor', 'ConversationDataExtractor'),
        ('process_engine.workflow_manager', 'WorkflowManager'),
        ('process_engine.bpmn_generator', 'BPMNGenerator'),
        ('process_engine.process_client', 'ProcessEngineClient'),
        ('tools.process_engine_tool', 'ProcessEngineTool')
    ]
    
    successful_imports = []
    failed_imports = []
    
    for module_name, class_name in import_tests:
        try:
            module = __import__(module_name, fromlist=[class_name])
            cls = getattr(module, class_name)
            successful_imports.append((module_name, class_name))
            print(f"‚úÖ {module_name}.{class_name} erfolgreich importiert")
        except Exception as e:
            failed_imports.append((module_name, class_name, str(e)))
            print(f"‚ö†Ô∏è {module_name}.{class_name} Import fehlgeschlagen: {e}")
    
    # Mindestens 50% sollten erfolgreich sein
    success_rate = len(successful_imports) / len(import_tests)
    assert success_rate >= 0.5, f"Zu viele Import-Fehler: {failed_imports}"
    
    print(f"‚úÖ Process Engine Imports Test: {len(successful_imports)}/{len(import_tests)} erfolgreich")


if __name__ == "__main__":
    # F√ºhre alle Tests aus
    print("üîß Starte Process Engine Tests...")
    
    test_functions = [
        test_data_extractor_patterns,
        test_bpmn_generator_basic,
        test_workflow_definitions,
        test_process_engine_tool_basic,
        test_settings_integration,
        test_docker_compose_file_exists,
        test_setup_script_exists,
        test_process_engine_imports
    ]
    
    successful_tests = 0
    total_tests = len(test_functions)
    
    for test_func in test_functions:
        try:
            print(f"\nüß™ {test_func.__name__}...")
            test_func()
            successful_tests += 1
        except Exception as e:
            print(f"‚ùå {test_func.__name__} fehlgeschlagen: {e}")
    
    print(f"\nüìä Test-Ergebnis: {successful_tests}/{total_tests} Tests erfolgreich")
    
    if successful_tests == total_tests:
        print("üéâ Alle Tests erfolgreich!")
    elif successful_tests >= total_tests * 0.75:
        print("‚úÖ Meiste Tests erfolgreich - System funktionsf√§hig")
    else:
        print("‚ö†Ô∏è Viele Tests fehlgeschlagen - √úberpr√ºfung erforderlich")